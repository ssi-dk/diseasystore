[{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ssi-dk.github.io/diseasystore/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ssi-dk.github.io/diseasystore/PULL_REQUEST_TEMPLATE.html","id":"intent","dir":"","previous_headings":"","what":"Intent","title":"NA","text":"Describe briefly problem pull request resolves, new features introduces. Please link issues possible (see also “Linking pull request issue”). Trivial changes, like fixing typo, need issue.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/PULL_REQUEST_TEMPLATE.html","id":"approach","dir":"","previous_headings":"","what":"Approach","title":"NA","text":"issue resolved? Describe approach taken; describe non-obvious considerations made choosing approach. change covered test, please explain .","code":""},{"path":"https://ssi-dk.github.io/diseasystore/PULL_REQUEST_TEMPLATE.html","id":"known-issues","dir":"","previous_headings":"","what":"Known issues","title":"NA","text":"known issues introduced pull request, please let us know. Code rarely perfect, pull request still welcome fix bigger new bug.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/PULL_REQUEST_TEMPLATE.html","id":"checklist","dir":"","previous_headings":"","what":"Checklist","title":"NA","text":"PR passes local unit tests documented new features introduced PR adds new feature, please add entry NEWS.md reviewer assigned PR","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/diseasystore.html","id":"available-diseasystores","dir":"Articles","previous_headings":"","what":"Available diseasystores","title":"diseasystore: quick start guide","text":"see available diseasystores system, can use available_diseasystores() function. function looks diseasystores current search path. default, show diseasystores bundled base package. extended diseasystore either diseasystores external package, attaching package search path allow show available. Note: diseasystores found defined within packages named diseasystore* class DiseasystoreBase. diseasystores may vignette details content, use /tips tricks. example case DiseasystoreGoogleCovid19.","code":"available_diseasystores() #> [1] \"DiseasystoreEcdcRespiratoryViruses\" \"DiseasystoreGoogleCovid19\""},{"path":"https://ssi-dk.github.io/diseasystore/articles/diseasystore.html","id":"using-a-diseasystore","dir":"Articles","previous_headings":"","what":"Using a diseasystore","title":"diseasystore: quick start guide","text":"use diseasystore need first configuration. diseasystores designed work data bases store computed features . diseasystore may require individual configuration listed documentation accompanying vignette. Quick start, configure DiseasystoreGoogleCovid19 use local SQLite data base Ideally, want use faster, capable, data base store features . diseasystores uses SCDB back end can use data base back end supported SCDB. create new diseasystore instance, also supply start_date end_date arguments. strictly required, make getting features time interval simpler. configured can query available features diseasystore features can retrieved individually (using start_date end_date specified creation ds): Notice features associated “key_*” “valid_from/” columns. used one primary selling points diseasystore, namely automatic aggregation. Go get features time intervals, can manually supply start_date /end_date:","code":"ds <- DiseasystoreGoogleCovid19$new(   target_conn = DBI::dbConnect(RSQLite::SQLite()),   start_date = as.Date(\"2020-03-01\"),   end_date = as.Date(\"2020-03-15\") ) ds$available_features #>  [1] \"n_population\"    \"age_group\"       \"country_id\"      \"country\"         #>  [5] \"region_id\"       \"region\"          \"subregion_id\"    \"subregion\"       #>  [9] \"n_hospital\"      \"n_deaths\"        \"n_positive\"      \"n_icu\"           #> [13] \"n_ventilator\"    \"min_temperature\" \"max_temperature\" ds$get_feature(\"n_hospital\") #> # Source:   table<`dbplyr_EZ1U7X59H5`> [?? x 5] #> # Database: sqlite 3.45.2 [] #>   key_location key_age_bin n_hospital valid_from valid_until #>   <chr>        <chr>            <dbl>      <dbl>       <dbl> #> 1 AR           0                   NA      18322       18323 #> 2 AR           0                   NA      18330       18331 #> 3 AR           0                    0      18324       18325 #> 4 AR           0                    1      18323       18324 #> 5 AR           0                    1      18327       18328 #> # ℹ more rows ds$get_feature(\"n_hospital\",                start_date = as.Date(\"2020-03-01\"),                end_date = as.Date(\"2020-03-02\")) #> # Source:   table<`dbplyr_oBF7QxMz0h`> [?? x 5] #> # Database: sqlite 3.45.2 [] #>   key_location key_age_bin n_hospital valid_from valid_until #>   <chr>        <chr>            <dbl>      <dbl>       <dbl> #> 1 AR           0                   NA      18322       18323 #> 2 AR           0                    1      18323       18324 #> 3 AR           1                    0      18323       18324 #> 4 AR           1                    1      18322       18323 #> 5 AR           2                    1      18322       18323 #> # ℹ more rows"},{"path":"https://ssi-dk.github.io/diseasystore/articles/diseasystore.html","id":"dynamically-expanded","dir":"Articles","previous_headings":"","what":"Dynamically expanded","title":"diseasystore: quick start guide","text":"diseasystore automatically expands computed features. Say given “n_hospital” computed 2020-03-01 2020-03-15. case, call $get_feature(\"n_hospital\", start_date = .Date(\"2020-03-01\"), end_date = .Date(\"2020-03-20\") needs compute feature 2020-03-16 2020-03-20.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/diseasystore.html","id":"time-versioned","dir":"Articles","previous_headings":"","what":"Time versioned","title":"diseasystore: quick start guide","text":"using SCDB back end, features stored even new data becomes available. way, get time-versioned record features provided diseasystore. features computed controlled slice_ts argument. default, diseasystores uses today’s date argument. dynamical expansion features described valid given slice_ts. , feature computed time interval one slice_ts, diseasystore recompute feature slice_ts. way, feature computation can implemented continuous integration (requesting features preserve history computed features). Furthermore, post-hoc analysis can performed computing features looked previous dates.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/diseasystore.html","id":"automatic-aggregation","dir":"Articles","previous_headings":"","what":"Automatic aggregation","title":"diseasystore: quick start guide","text":"real strength diseasystore comes built-automatic aggregation. saw features come additional associated “key_*” “valid_from/” columns. additional information used automatic aggregation $key_join_features() method (see extending-diseasystore details). use method, need provide observable want aggregate stratification want apply aggregation. Lets start simple example request stratification (NULL): gives us feature information ds$get_feature(\"n_hospital\") simplified give observable per day (case, number people hospitalised). specify level stratification, need supply list quosures (see help(\"topic-quosure\", package = \"rlang\")). stratification argument flexible, can supply valid R expression:","code":"ds$key_join_features(observable = \"n_hospital\",                      stratification = NULL) #> # A tibble: 15 × 2 #>   date       n_hospital #>   <date>          <dbl> #> 1 2020-03-01          3 #> 2 2020-03-02          6 #> 3 2020-03-03          5 #> 4 2020-03-04         12 #> 5 2020-03-05          8 #> # ℹ 10 more rows ds$key_join_features(observable = \"n_hospital\",                      stratification = rlang::quos(country_id)) #> # A tibble: 15 × 3 #>   date       country_id n_hospital #>   <date>     <chr>           <dbl> #> 1 2020-03-01 AR                  3 #> 2 2020-03-02 AR                  6 #> 3 2020-03-03 AR                  5 #> 4 2020-03-04 AR                 12 #> 5 2020-03-05 AR                  8 #> # ℹ 10 more rows ds$key_join_features(observable = \"n_hospital\",                      stratification = rlang::quos(country_id,                                                   old = age_group == \"90+\")) #> # A tibble: 30 × 4 #>   date       country_id   old n_hospital #>   <date>     <chr>      <int>      <dbl> #> 1 2020-03-01 AR             0         27 #> 2 2020-03-02 AR             0         54 #> 3 2020-03-03 AR             0         45 #> 4 2020-03-04 AR             0        108 #> 5 2020-03-05 AR             0         72 #> # ℹ 25 more rows"},{"path":"https://ssi-dk.github.io/diseasystore/articles/diseasystore.html","id":"dropping-computed-features","dir":"Articles","previous_headings":"","what":"Dropping computed features","title":"diseasystore: quick start guide","text":"Sometimes, need clear compute features data base. purpose, provide drop_diseasystore() function. default, deletes stored features default diseasystore schema. pattern argument match tables schema argument specify schema delete from1.","code":"SCDB::get_tables(ds$target_conn) #>    schema                              table #> 1    main       ds.google_covid_19_age_group #> 2    main           ds.google_covid_19_index #> 3    main        ds.google_covid_19_hospital #> 4    main                           ds.locks #> 5    main                            ds.logs #> 6    temp                     SCDB_12114_024 #> 7    temp                  dbplyr_kgPY1bPB7z #> 8    temp                     SCDB_12114_025 #> 9    temp                  dbplyr_T1j3HbFlCu #> 10   temp                  dbplyr_bdClHujZ6V #> 11   temp                ds_validities_12114 #> 12   temp                  dbplyr_MWTk61j7Q4 #> 13   temp                     SCDB_12114_020 #> 14   temp                  dbplyr_5bG7gFZ2RI #> 15   temp                  dbplyr_2zDoz7gvmR #> 16   temp          ds_all_combinations_12114 #> 17   temp                     SCDB_12114_012 #> 18   temp ds_google_covid_19_age_group_12114 #> 19   temp                  dbplyr_hByrdeDhSC #> 20   temp                     SCDB_12114_009 #> 21   temp                     SCDB_12114_017 #> 22   temp                  dbplyr_uVs7TnBty9 #> 23   temp     ds_google_covid_19_index_12114 #> 24   temp                  dbplyr_EZ1U7X59H5 #> 25   temp                     SCDB_12114_008 #> 26   temp                  dbplyr_PzDsCtpAUT #> 27   temp                  dbplyr_oFQJxb20Bt #> 28   temp                  dbplyr_oBF7QxMz0h #> 29   temp                     SCDB_12114_001 #> 30   temp  ds_google_covid_19_hospital_12114 #> 31   temp               ds_study_dates_12114 #> 32   temp                  dbplyr_VdisgpRrIA #> 33   temp                     SCDB_12114_004 #> 34   temp                     SCDB_12114_016 drop_diseasystore(conn = ds$target_conn)  SCDB::get_tables(ds$target_conn) #>    schema                              table #> 1    temp                     SCDB_12114_024 #> 2    temp                  dbplyr_kgPY1bPB7z #> 3    temp                     SCDB_12114_025 #> 4    temp                  dbplyr_T1j3HbFlCu #> 5    temp                  dbplyr_bdClHujZ6V #> 6    temp                ds_validities_12114 #> 7    temp                  dbplyr_MWTk61j7Q4 #> 8    temp                     SCDB_12114_020 #> 9    temp                  dbplyr_5bG7gFZ2RI #> 10   temp                  dbplyr_2zDoz7gvmR #> 11   temp          ds_all_combinations_12114 #> 12   temp                     SCDB_12114_012 #> 13   temp ds_google_covid_19_age_group_12114 #> 14   temp                  dbplyr_hByrdeDhSC #> 15   temp                     SCDB_12114_009 #> 16   temp                     SCDB_12114_017 #> 17   temp                  dbplyr_uVs7TnBty9 #> 18   temp     ds_google_covid_19_index_12114 #> 19   temp                  dbplyr_EZ1U7X59H5 #> 20   temp                     SCDB_12114_008 #> 21   temp                  dbplyr_PzDsCtpAUT #> 22   temp                  dbplyr_oFQJxb20Bt #> 23   temp                  dbplyr_oBF7QxMz0h #> 24   temp                     SCDB_12114_001 #> 25   temp  ds_google_covid_19_hospital_12114 #> 26   temp               ds_study_dates_12114 #> 27   temp                  dbplyr_VdisgpRrIA #> 28   temp                     SCDB_12114_004 #> 29   temp                     SCDB_12114_016"},{"path":"https://ssi-dk.github.io/diseasystore/articles/diseasystore.html","id":"diseasystore-options","dir":"Articles","previous_headings":"","what":"diseasystore options","title":"diseasystore: quick start guide","text":"diseasystores number options available make configuration easier. options start “diseasystore.”. Notice several options set empty strings (““). treated NULL diseasystore2. Importantly, options scoped. Consider options “source_conn”: Looking list options find “diseasystore.source_conn” “diseasystore.DiseasystoreGoogleCovid19.source_conn”. former general setting latter specific setting DiseasystoreGoogleCovid19. general setting used fallback specific setting found. allows set general configuration use overwrite specific cases. get option related scope, can use diseasyoption() function. saw options, source_conn option defined specifically DiseasystoreGoogleCovid19. try hypothetical DiseasystoreDiseaseY, see value defined yet configured fallback value. change general setting source_conn retry, see get fallback value. Finally, can use .default argument final fallback value case option set either general specific case.","code":"options()[purrr::keep(names(options()), ~ startsWith(., \"diseasystore\"))] #> $diseasystore.DiseasystoreEcdcRespiratoryViruses.pull #> [1] TRUE #>  #> $diseasystore.DiseasystoreEcdcRespiratoryViruses.remote_conn #> [1] \"https://api.github.com/repos/EU-ECDC/Respiratory_viruses_weekly_data\" #>  #> $diseasystore.DiseasystoreEcdcRespiratoryViruses.source_conn #> [1] \"https://api.github.com/repos/EU-ECDC/Respiratory_viruses_weekly_data\" #>  #> $diseasystore.DiseasystoreEcdcRespiratoryViruses.target_conn #> [1] \"\" #>  #> $diseasystore.DiseasystoreEcdcRespiratoryViruses.target_schema #> [1] \"\" #>  #> $diseasystore.DiseasystoreGoogleCovid19.n_max #> [1] 1000 #>  #> $diseasystore.DiseasystoreGoogleCovid19.remote_conn #> [1] \"https://storage.googleapis.com/covid19-open-data/v3/\" #>  #> $diseasystore.DiseasystoreGoogleCovid19.source_conn #> [1] \"https://storage.googleapis.com/covid19-open-data/v3/\" #>  #> $diseasystore.DiseasystoreGoogleCovid19.target_conn #> [1] \"\" #>  #> $diseasystore.DiseasystoreGoogleCovid19.target_schema #> [1] \"\" #>  #> $diseasystore.lock_wait_increment #> [1] 15 #>  #> $diseasystore.lock_wait_max #> [1] 1800 #>  #> $diseasystore.source_conn #> [1] \"\" #>  #> $diseasystore.target_conn #> [1] \"\" #>  #> $diseasystore.target_schema #> [1] \"ds\" #>  #> $diseasystore.verbose #> [1] FALSE diseasyoption(\"source_conn\", class = \"DiseasystoreGoogleCovid19\") #> [1] \"https://storage.googleapis.com/covid19-open-data/v3/\" diseasyoption(\"source_conn\", class = \"DiseasystoreDiseaseY\") #> NULL options(\"diseasystore.source_conn\" = file.path(\"local\", \"path\")) diseasyoption(\"source_conn\", class = \"DiseasystoreDiseaseY\") #> [1] \"local/path\" diseasyoption(\"non_existent\", class = \"DiseasystoreDiseaseY\", .default = \"final fallback\") #> [1] \"final fallback\""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"the-diseasy-data-model","dir":"Articles","previous_headings":"","what":"The diseasy data model","title":"Extending diseasystore","text":"begin, go data model used within diseasystores. data model enables automatic coupling features powers package.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"a-bitemporal-data-model","dir":"Articles","previous_headings":"The diseasy data model","what":"A bitemporal data model","title":"Extending diseasystore","text":"data created diseasystores -called “bitemporal” data. means two temporal dimensions. One representing validity record, one representing availability record.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"valid_from-and-valid_until","dir":"Articles","previous_headings":"The diseasy data model > A bitemporal data model","what":"valid_from and valid_until","title":"Extending diseasystore","text":"validity dimension indicates given data point “valid”, e.g. hospitalisation valid admission discharge date. temporal dimension familiar simply “regular” time. encode validity information columns valid_from valid_until record valid time t satisfies valid_from <= t < valid_until. many features, validity single day (test result) valid_until column day valid_from. convention, place column last columns table1.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"from_ts-and-until_ts","dir":"Articles","previous_headings":"The diseasy data model > A bitemporal data model","what":"from_ts and until_ts","title":"Extending diseasystore","text":"diseasystore uses SCDB background store computed features. SCDB implements second temporal dimension indicates record present data. information encoded columns from_ts until_ts. Normally, don’t see columns working diseasystore since masked SCDB. However, inspect tables created database diseasystore, find present. purposes, sufficient know column gives time-versioned data base can extract previous versions slice_ts argument. supplying time τ slice_ts, get data available date. allows us build continuous integration features preserving previously computed features.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"automatic-data-coupling","dir":"Articles","previous_headings":"The diseasy data model","what":"Automatic data-coupling","title":"Extending diseasystore","text":"primary feature diseasystore ability automatically couple aggregate features. coupling requires common “key_*” columns features. feature diseasystore therefore must least one “key_*” column. convention, place column first columns table.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"features","dir":"Articles","previous_headings":"The diseasy data model","what":"Features","title":"Extending diseasystore","text":"Finally, come main data diseasystore, namely features. First, reminder “feature” comes machine learning individual piece information. subdivide features two categories: “observables” “stratifications”. levels, indistinguishable, purposes differ hence need handle individually.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"observables","dir":"Articles","previous_headings":"The diseasy data model > Features","what":"Observables","title":"Extending diseasystore","text":"diseasystore feature whose name either starts “n_” ends “_temperature” treated “observables”. modelling perspective, observables typically metrics want model take inputs inform model.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"stratifications","dir":"Articles","previous_headings":"The diseasy data model > Features","what":"Stratifications","title":"Extending diseasystore","text":"Conversely, feature “stratification” feature. features variables used subdivide analysis match structure model (hence called stratification features). prominent example disease models stratification feature like “age_group”, since diseases show strong dependency age affected individuals.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"naming-convention","dir":"Articles","previous_headings":"The diseasy data model > Features","what":"Naming convention","title":"Extending diseasystore","text":"formal requirement naming observables stratifications, considered best practice use names diseasystores features possible2. simplifies process adapting analyses disease models new diseasystores.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"creating-featurehandlers","dir":"Articles","previous_headings":"","what":"Creating FeatureHandlers","title":"Extending diseasystore","text":"facilitate automatic coupling aggregation features, use ?FeatureHandler class. feature3 diseasystore associated FeatureHandler implements computation, retrieval aggregation feature.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"computing-features","dir":"Articles","previous_headings":"Creating FeatureHandlers","what":"Computing features","title":"Extending diseasystore","text":"FeatureHandler defines compute function must form: arguments start_date end_date indicates period features computed. diseasystores dynamically expanded, feature computation often restricted limited time intervals indicated start_date end_date. mentioned slice_ts specifies date computed . E.g. slice_ts current date, current features computed. Conversely, slice_ts past date, features corresponding date computed. Lastly, source_conn flexible argument passed FeatureHandler indicating source data needed compute features stored (e.g. database connection directory). Note multiple features can computed single FeatureHandler. example, may decide convenient compute multiple different features simultaneously (e.g. hospitalisation classification said hospitalisation test associated test result).","code":"compute = function(start_date, end_date, slice_ts, source_conn)"},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"retrieving-features","dir":"Articles","previous_headings":"Creating FeatureHandlers","what":"Retrieving features","title":"Extending diseasystore","text":"FeatureHandler defines $get() function must form: Typically, need specify function since default (variant SCDB::get_table()) always works. However, case need specify , target_table argument DBI::Id specifying location data base table features stored. target_conn connection database. , slice_ts time-keeping variable.","code":"get = function(target_table, slice_ts, target_conn)"},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"aggregators","dir":"Articles","previous_headings":"Creating FeatureHandlers","what":"Aggregators","title":"Extending diseasystore","text":"FeatureHandler defines key_join function must form: cases, able use bundled key_join_* functions (see ?aggregators full list). event, need create aggregator arguments follows: .data grouped data.frame whose groups specified stratification argument (see Automatic aggregation). feature name feature(s) aggregate. aggregator return dplyr::summarise() call operates columns specified feature argument.","code":"key_join = function(.data, feature)"},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"putting-it-all-together","dir":"Articles","previous_headings":"Creating FeatureHandlers","what":"Putting it all together","title":"Extending diseasystore","text":"now, know basics creating FeatureHandlers. see FeatureHandlers action, can consult bundled diseasystore package. example: DiseasystoreGoogleCovid19: index DiseasystoreGoogleCovid19: min temperature","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"creating-a-diseasystore","dir":"Articles","previous_headings":"","what":"Creating a diseasystore","title":"Extending diseasystore","text":"knowledge build custom FeatureHandlers, turn attention remaining parts diseasystore’s anatomy. diseasystores R6 classes implementation object-oriented (OO) programming. unfamiliar OO programming, diseasystores single “objects” number “public” “private” functions variables. public functions variables visible user diseasystore private functions variables visible us (developers). extending diseasystore, writing private functions variables. public functions variables handled elsewhere4.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"ds_map","dir":"Articles","previous_headings":"Creating a diseasystore","what":"ds_map","title":"Extending diseasystore","text":"ds_map field diseasystore tells diseasystore FeatureHandler responsible feature, thus allowing diseasystore retrieve features specified observable stratification arguments calls $get_feature(). words, maps names features corresponding FeatureHandlers. saw , FeatureHandler may compute single feature. feature mapped FeatureHandler else diseasystore able automatically interact . convention, name FeatureHandler snake_case contain diseasystore specific prefix (e.g. DiseasystoreGoogleCovid19, FeatureHandlers named “google_covid_19_”). names used table names storing features database, prefix helps structure database accordingly. latter part becomes important clean data base needs performed.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"key-join-filter","dir":"Articles","previous_headings":"Creating a diseasystore","what":"Key join filter","title":"Extending diseasystore","text":"diseasystore made flexible possible means can incorporate individual level data semi-aggregated data. semi-aggregated data, often case data includes aggregations different levels, nested within data. example, Google COVID-19 data repository contains information country-level region-level data files. user DiseasystoreGoogleCovid19 asks get feature stratified , example, “country_id”, need filter data aggregated region level. purpose $key_join_filter(). takes input requested stratifications filters data accordingly features joined inside diseasystore. example, can consult DiseasystoreGoogleCovid19: key_join_filter","code":""},{"path":"https://ssi-dk.github.io/diseasystore/articles/extending-diseasystore.html","id":"testing-your-diseasystore","dir":"Articles","previous_headings":"Creating a diseasystore","what":"Testing your diseasystore","title":"Extending diseasystore","text":"diseasystore package includes function test_diseasystore() test diseasystores. can see call testing suite action DiseasystoreGoogleCovid19 example .","code":""},{"path":"https://ssi-dk.github.io/diseasystore/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rasmus Skytte Randløv. Author, maintainer. Marcus Munch Grünewald. Contributor. Kaare Græsbøll. Reviewer. Kasper Schou Telkamp. Reviewer. Lasse Engbo Christiansen. Reviewer. Sofia Myrup Otero. Reviewer. . Copyright holder, funder.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Randløv R (2024). diseasystore: Feature Stores 'diseasy' Framework. R package version 0.2.1, https://ssi-dk.github.io/diseasystore/, https://github.com/ssi-dk/diseasystore.","code":"@Manual{,   title = {diseasystore: Feature Stores for the 'diseasy' Framework},   author = {Rasmus Skytte Randløv},   year = {2024},   note = {R package version 0.2.1, https://ssi-dk.github.io/diseasystore/},   url = {https://github.com/ssi-dk/diseasystore}, }"},{"path":[]},{"path":"https://ssi-dk.github.io/diseasystore/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Feature Stores for the diseasy Framework","text":"diseasystore package provides feature stores implemented R specifically designed serve disease data epidemic preparedness. makes diseasystore special, features can automatically coupled stratified within diseasystore package. Consult Quick start vignette see action (vignette(\"quick-start\", package = \"diseasystore\")). package forms data-backbone {diseasy} package.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/index.html","id":"handling-of-diverse-data-sources","dir":"","previous_headings":"","what":"Handling of diverse data sources","title":"Feature Stores for the diseasy Framework","text":"Different data sources handled individual diseasystores facilitate access relevant disease data given data source. Data different diseases typically structured different ways. diseasystore package currently implements Google Health COVID-19 Open Repository diseasystores way. diseasystore package designed handle individual-level data (examples come) semi-aggregated (typically publicly available) data. data individual-level, feature store fully dynamic can adapt (virtually) stratification user specifies. data conversely semi-aggregated, data can stratified levels semi-aggregation (higher levels).","code":""},{"path":"https://ssi-dk.github.io/diseasystore/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Feature Stores for the diseasy Framework","text":"","code":"# Install diseasystore from CRAN: install.packages(\"diseasystore\")  # Alternatively, install the development version from github: # install.packages(\"devtools\") devtools::install_github(\"ssi-dk/diseasystore\")"},{"path":"https://ssi-dk.github.io/diseasystore/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Feature Stores for the diseasy Framework","text":"basic usage examples, see vignette(\"diseasystore\").","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":null,"dir":"Reference","previous_headings":"","what":"diseasystore base handler — DiseasystoreBase","title":"diseasystore base handler — DiseasystoreBase","text":"DiseasystoreBase R6 class forms basis feature stores. defines primary methods feature stores well public methods.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"diseasystore base handler — DiseasystoreBase","text":"new instance DiseasystoreBase  R6 class.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"diseasystore base handler — DiseasystoreBase","text":"ds_map (named list(character)) list maps features known feature store corresponding feature handlers compute features. Read . available_features (character) list available features feature store. Read . label (character) human readable label feature store. Read . source_conn (DBIConnection file path) Used specify data located.  Read . Can DBIConnection file path depending diseasystore. target_conn (DBIConnection) database connection store computed features .  Read . target_schema (character) schema place feature store .  Read . database backend support schema, tables prefixed <target_schema>. start_date (Date) Study period start.  Read . end_date (Date) Study period end.  Read . slice_ts (Date character) Date timestamp (parsable .POSIXct) slice database (used source_conn database).  Read .","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"diseasystore base handler — DiseasystoreBase","text":"DiseasystoreBase$new() DiseasystoreBase$finalize() DiseasystoreBase$get_feature() DiseasystoreBase$key_join_features() DiseasystoreBase$clone()","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"diseasystore base handler — DiseasystoreBase","text":"Creates new instance DiseasystoreBase R6 class.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"diseasystore base handler — DiseasystoreBase","text":"","code":"DiseasystoreBase$new(   start_date = NULL,   end_date = NULL,   slice_ts = NULL,   source_conn = NULL,   target_conn = NULL,   target_schema = NULL,   verbose = diseasyoption(\"verbose\", self) )"},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"diseasystore base handler — DiseasystoreBase","text":"start_date (Date) Study period start. end_date (Date) Study period end. slice_ts (Date character) Date timestamp (parsable .POSIXct) slice database (used source_conn database). source_conn (DBIConnection file path) Used specify data located.  Can DBIConnection file path depending diseasystore. target_conn (DBIConnection) database connection store computed features . target_schema (character) schema place feature store .  database backend support schema, tables prefixed <target_schema>. verbose (boolean) Boolean controls enables debugging information.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"diseasystore base handler — DiseasystoreBase","text":"new instance DiseasystoreBase R6 class.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"method-finalize-","dir":"Reference","previous_headings":"","what":"Method finalize()","title":"diseasystore base handler — DiseasystoreBase","text":"Closes open DB connection removing object","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"diseasystore base handler — DiseasystoreBase","text":"","code":"DiseasystoreBase$finalize()"},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"method-get-feature-","dir":"Reference","previous_headings":"","what":"Method get_feature()","title":"diseasystore base handler — DiseasystoreBase","text":"Computes, stores, returns requested feature study period.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"diseasystore base handler — DiseasystoreBase","text":"","code":"DiseasystoreBase$get_feature(   feature,   start_date = self %.% start_date,   end_date = self %.% end_date,   slice_ts = self %.% slice_ts )"},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"diseasystore base handler — DiseasystoreBase","text":"feature (character) name feature defined feature store. start_date (Date) Study period start. end_date (Date) Study period end. slice_ts (Date character) Date timestamp (parsable .POSIXct) slice database (used source_conn database).","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"diseasystore base handler — DiseasystoreBase","text":"tbl_dbi requested feature study period.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"method-key-join-features-","dir":"Reference","previous_headings":"","what":"Method key_join_features()","title":"diseasystore base handler — DiseasystoreBase","text":"Joins various features feature store assuming primary feature (observable) contains keys witch secondary features (defined stratification) can joined.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"diseasystore base handler — DiseasystoreBase","text":"","code":"DiseasystoreBase$key_join_features(   observable,   stratification,   start_date = self %.% start_date,   end_date = self %.% end_date )"},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"diseasystore base handler — DiseasystoreBase","text":"observable (character) name feature defined feature store stratification (list(quosures)) Expressions stratification evaluated find appropriate features. joined observable feature stratification performed. start_date (Date) Study period start. end_date (Date) Study period end.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"diseasystore base handler — DiseasystoreBase","text":"tbl_dbi requested joined features study period.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"diseasystore base handler — DiseasystoreBase","text":"objects class cloneable method.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"diseasystore base handler — DiseasystoreBase","text":"","code":"DiseasystoreBase$clone(deep = FALSE)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"diseasystore base handler — DiseasystoreBase","text":"deep Whether make deep clone.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreBase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"diseasystore base handler — DiseasystoreBase","text":"","code":"# DiseasystoreBase is mostly used as the basis of other, more specific, classes   # The DiseasystoreBase can be initialised individually if needed.    ds <- DiseasystoreBase$new(source_conn = NULL,                              target_conn = DBI::dbConnect(RSQLite::SQLite()))    rm(ds)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreEcdcRespiratoryViruses.html","id":null,"dir":"Reference","previous_headings":"","what":"feature store handler of EU-ECDC Respiratory viruses features — DiseasystoreEcdcRespiratoryViruses","title":"feature store handler of EU-ECDC Respiratory viruses features — DiseasystoreEcdcRespiratoryViruses","text":"DiseasystoreEcdcRespiratoryViruses R6 brings support using EU-ECDC Respiratory viruses weekly data repository. See vignette(\"diseasystore-ecdc-respiratory-viruses\") details configure feature store.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreEcdcRespiratoryViruses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"feature store handler of EU-ECDC Respiratory viruses features — DiseasystoreEcdcRespiratoryViruses","text":"new instance DiseasystoreEcdcRespiratoryViruses  R6 class.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreEcdcRespiratoryViruses.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"feature store handler of EU-ECDC Respiratory viruses features — DiseasystoreEcdcRespiratoryViruses","text":"diseasystore::DiseasystoreBase -> DiseasystoreEcdcRespiratoryViruses","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreEcdcRespiratoryViruses.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"feature store handler of EU-ECDC Respiratory viruses features — DiseasystoreEcdcRespiratoryViruses","text":"diseasystore::DiseasystoreBase$finalize() diseasystore::DiseasystoreBase$get_feature() diseasystore::DiseasystoreBase$initialize() diseasystore::DiseasystoreBase$key_join_features()","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreEcdcRespiratoryViruses.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"feature store handler of EU-ECDC Respiratory viruses features — DiseasystoreEcdcRespiratoryViruses","text":"DiseasystoreEcdcRespiratoryViruses$clone()","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreEcdcRespiratoryViruses.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"feature store handler of EU-ECDC Respiratory viruses features — DiseasystoreEcdcRespiratoryViruses","text":"objects class cloneable method.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreEcdcRespiratoryViruses.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"feature store handler of EU-ECDC Respiratory viruses features — DiseasystoreEcdcRespiratoryViruses","text":"","code":"DiseasystoreEcdcRespiratoryViruses$clone(deep = FALSE)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreEcdcRespiratoryViruses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"feature store handler of EU-ECDC Respiratory viruses features — DiseasystoreEcdcRespiratoryViruses","text":"deep Whether make deep clone.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreEcdcRespiratoryViruses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"feature store handler of EU-ECDC Respiratory viruses features — DiseasystoreEcdcRespiratoryViruses","text":"","code":"ds <- DiseasystoreEcdcRespiratoryViruses$new(     source_conn = \".\",     target_conn = DBI::dbConnect(RSQLite::SQLite())   )    rm(ds)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreGoogleCovid19.html","id":null,"dir":"Reference","previous_headings":"","what":"feature store handler of Google Health COVID-19 Open Data features — DiseasystoreGoogleCovid19","title":"feature store handler of Google Health COVID-19 Open Data features — DiseasystoreGoogleCovid19","text":"DiseasystoreGoogleCovid19 R6 brings support using Google Health COVID-19 Open Data repository. See vignette(\"diseasystore-google-covid-19\") details configure feature store.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreGoogleCovid19.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"feature store handler of Google Health COVID-19 Open Data features — DiseasystoreGoogleCovid19","text":"new instance DiseasystoreGoogleCovid19  R6 class.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreGoogleCovid19.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"feature store handler of Google Health COVID-19 Open Data features — DiseasystoreGoogleCovid19","text":"diseasystore::DiseasystoreBase -> DiseasystoreGoogleCovid19","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreGoogleCovid19.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"feature store handler of Google Health COVID-19 Open Data features — DiseasystoreGoogleCovid19","text":"diseasystore::DiseasystoreBase$finalize() diseasystore::DiseasystoreBase$get_feature() diseasystore::DiseasystoreBase$initialize() diseasystore::DiseasystoreBase$key_join_features()","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreGoogleCovid19.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"feature store handler of Google Health COVID-19 Open Data features — DiseasystoreGoogleCovid19","text":"DiseasystoreGoogleCovid19$clone()","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreGoogleCovid19.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"feature store handler of Google Health COVID-19 Open Data features — DiseasystoreGoogleCovid19","text":"objects class cloneable method.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreGoogleCovid19.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"feature store handler of Google Health COVID-19 Open Data features — DiseasystoreGoogleCovid19","text":"","code":"DiseasystoreGoogleCovid19$clone(deep = FALSE)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreGoogleCovid19.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"feature store handler of Google Health COVID-19 Open Data features — DiseasystoreGoogleCovid19","text":"deep Whether make deep clone.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/DiseasystoreGoogleCovid19.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"feature store handler of Google Health COVID-19 Open Data features — DiseasystoreGoogleCovid19","text":"","code":"ds <- DiseasystoreGoogleCovid19$new(     source_conn = \".\",     target_conn = DBI::dbConnect(RSQLite::SQLite())   )    rm(ds)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/FeatureHandler.html","id":null,"dir":"Reference","previous_headings":"","what":"FeatureHandler — FeatureHandler","title":"FeatureHandler — FeatureHandler","text":"FeatureHandler R6 handles individual features feature stores. define three methods associated features (compute, get key_join).","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/FeatureHandler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FeatureHandler — FeatureHandler","text":"new instance FeatureHandler  R6 class.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/FeatureHandler.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"FeatureHandler — FeatureHandler","text":"compute (function) function form \"function(start_date, end_date, slice_ts, source_conn)\". function compute feature source connection. get (function) function form \"function(target_table, slice_ts, target_conn)\". function retrieve computed feature target connection. key_join (function) One aggregators aggregators.","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/diseasystore/reference/FeatureHandler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"FeatureHandler — FeatureHandler","text":"FeatureHandler$new() FeatureHandler$clone()","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/FeatureHandler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"FeatureHandler — FeatureHandler","text":"Creates new instance FeatureHandler R6 class.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/FeatureHandler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FeatureHandler — FeatureHandler","text":"","code":"FeatureHandler$new(compute = NULL, get = NULL, key_join = NULL)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/FeatureHandler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FeatureHandler — FeatureHandler","text":"compute (function) function form \"function(start_date, end_date, slice_ts, source_conn)\". function return data.frame computed feature (computed source connection). data.frame contain following columns: key_*: One () columns containing keys link feature features *: One () columns containing features computed valid_from, valid_until: set columns containing time period feature information valid. get (function) (Optional). function form \"function(target_table, slice_ts, target_conn)\". function retrieve computed feature target connection. key_join (function) function like one aggregators aggregators(). function return expression form: dplyr::summarise(.data, dplyr::across(.cols = tidyselect::all_of(feature), .fns = list(n = ~ aggregation function), .names = \"{.fn}\"), .groups = \"drop\")","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/FeatureHandler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"FeatureHandler — FeatureHandler","text":"new instance FeatureHandler R6 class.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/FeatureHandler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"FeatureHandler — FeatureHandler","text":"objects class cloneable method.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/FeatureHandler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"FeatureHandler — FeatureHandler","text":"","code":"FeatureHandler$clone(deep = FALSE)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/FeatureHandler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"FeatureHandler — FeatureHandler","text":"deep Whether make deep clone.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/FeatureHandler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FeatureHandler — FeatureHandler","text":"","code":"# The FeatureHandler is typically configured as part of making a new Diseasystore.   # Most often, we need only specify `compute` and `key_join` to get a functioning FeatureHandler    # In this example we use mtcars as the basis for our features   conn <- SCDB::get_connection(drv = RSQLite::SQLite())    # We use mtcars as our basis. First we add the rownames as an actual column   data <- dplyr::mutate(mtcars, key_name = rownames(mtcars), .before = dplyr::everything())    # Then we add some imaginary times where these cars were produced   data <- dplyr::mutate(data,                         production_start = as.Date(Sys.Date()) + floor(runif(nrow(mtcars)) * 100),                         production_end   = production_start + floor(runif(nrow(mtcars)) * 365))    dplyr::copy_to(conn, data, \"mtcars\")    # In this example, the feature we want is the \"maximum miles per gallon\"   # The feature in question in the mtcars data set is then \"mpg\" and when we need to reduce   # our data set, we want to use the \"max()\" function.    # We first write a compute function for the mpg in our modified mtcars data set   # Our goal is to get the mpg of all cars that were in production at the between start/end_date   compute_mpg <- function(start_date, end_date, slice_ts, source_conn) {     out <- SCDB::get_table(source_conn, \"mtcars\", slice_ts = slice_ts) |>       dplyr::filter({{ start_date }} <= .data$production_end,                     .data$production_start <= {{ end_date }}) |>       dplyr::transmute(\"key_name\", \"mpg\",                        \"valid_from\" = \"production_start\",                        \"valid_until\" = \"production_end\")      return(out)   }    # We can now combine into our FeatureHandler   fh_max_mpg <- FeatureHandler$new(compute = compute_mpg, key_join = key_join_max)    DBI::dbDisconnect(conn)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/age_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides age_labels that follows the mg standard — age_labels","title":"Provides age_labels that follows the mg standard — age_labels","text":"Provides age_labels follows mg standard","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/age_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides age_labels that follows the mg standard — age_labels","text":"","code":"age_labels(age_cuts)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/age_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides age_labels that follows the mg standard — age_labels","text":"age_cuts (numeric()) lower bound groups (0 implicitly included)","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/age_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provides age_labels that follows the mg standard — age_labels","text":"vector labels zero-padded numerics can sorted easily","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/age_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides age_labels that follows the mg standard — age_labels","text":"","code":"age_labels(c(5, 12, 20, 30)) #> [1] \"00-04\" \"05-11\" \"12-19\" \"20-29\" \"30+\""},{"path":"https://ssi-dk.github.io/diseasystore/reference/aggregators.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature aggregators — aggregators","title":"Feature aggregators — aggregators","text":"Feature aggregators","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/aggregators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature aggregators — aggregators","text":"","code":"key_join_sum(.data, feature)  key_join_max(.data, feature)  key_join_min(.data, feature)  key_join_count(.data, feature)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/aggregators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature aggregators — aggregators","text":".data () data object perform operation . feature (character) Name feature perform aggregation ","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/aggregators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Feature aggregators — aggregators","text":"dplyr::summarise aggregate features together using given function (sum/max/min/count)","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/aggregators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature aggregators — aggregators","text":"","code":"# Primarily used within the framework but can be used individually:    data <- dplyr::mutate(mtcars, key_name = rownames(mtcars), .before = dplyr::everything())    key_join_sum(data, \"mpg\")    # sum(mtcars$mpg) #>       n #> 1 642.9   key_join_max(data, \"mpg\")    # max(mtcars$mpg) #>      n #> 1 33.9   key_join_min(data, \"mpg\")    # min(mtcars$mpg) #>      n #> 1 10.4   key_join_count(data, \"mpg\")  # nrow(mtcars) #>    n #> 1 32"},{"path":"https://ssi-dk.github.io/diseasystore/reference/available_diseasystores.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect available diseasystores — available_diseasystores","title":"Detect available diseasystores — available_diseasystores","text":"Detect available diseasystores","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/available_diseasystores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect available diseasystores — available_diseasystores","text":"","code":"available_diseasystores()"},{"path":"https://ssi-dk.github.io/diseasystore/reference/available_diseasystores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect available diseasystores — available_diseasystores","text":"installed diseasystores search path","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/available_diseasystores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect available diseasystores — available_diseasystores","text":"","code":"available_diseasystores()  # DiseasystoreGoogleCovid19 + more from other packages #> [1] \"DiseasystoreEcdcRespiratoryViruses\" \"DiseasystoreGoogleCovid19\""},{"path":"https://ssi-dk.github.io/diseasystore/reference/diseasyoption.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to get options related to diseasy — diseasyoption","title":"Helper function to get options related to diseasy — diseasyoption","text":"Helper function get options related diseasy","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/diseasyoption.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to get options related to diseasy — diseasyoption","text":"","code":"diseasyoption(option, class = \"DiseasystoreBase\", .default = NULL)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/diseasyoption.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to get options related to diseasy — diseasyoption","text":"option (character(1)) Name option get. class (character(1) R6::R6class Diseasy* instance) Either classname object option applies . .default () default value return option set.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/diseasyoption.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to get options related to diseasy — diseasyoption","text":"specific option within diseasy framework given option class","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/diseasyoption.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to get options related to diseasy — diseasyoption","text":"","code":"# Retrieve default option for source conn   diseasyoption(\"source_conn\") #> NULL    # Retrieve DiseasystoreGoogleCovid19 specific option for source conn   diseasyoption(\"source_conn\", \"DiseasystoreGoogleCovid19\") #> [1] \"https://storage.googleapis.com/covid19-open-data/v3/\"    # Try to retrieve specific option for source conn for a non existent / un-configured diseasystore   diseasyoption(\"source_conn\", \"DiseasystoreNonExistent\") # Returns default source_conn #> NULL    # Try to retrieve specific non-existent option   diseasyoption(\"non_existent\", \"DiseasystoreGoogleCovid19\", .default = \"Use this\") #> [1] \"Use this\""},{"path":"https://ssi-dk.github.io/diseasystore/reference/diseasystore-package.html","id":null,"dir":"Reference","previous_headings":"","what":"diseasystore: Feature Stores for the 'diseasy' Framework — diseasystore-package","title":"diseasystore: Feature Stores for the 'diseasy' Framework — diseasystore-package","text":"Simple feature stores tools creating personalised feature stores. 'diseasystore' powers feature stores can automatically link aggregate features given stratification level. feature stores automatically time-versioned (powered 'SCDB' package) allows easily dynamically compute features part continuous integration.","code":""},{"path":[]},{"path":"https://ssi-dk.github.io/diseasystore/reference/diseasystore-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"diseasystore: Feature Stores for the 'diseasy' Framework — diseasystore-package","text":"Maintainer: Rasmus Skytte Randløv rske@ssi.dk (ORCID) contributors: Marcus Munch Grünewald (ORCID) [contributor] Kaare Græsbøll kagr@ssi.dk (ORCID) [reviewer] Kasper Schou Telkamp (ORCID) [reviewer] Lasse Engbo Christiansen lsec@ssi.dk (ORCID) [reviewer] Sofia Myrup Otero smot@ssi.dk [reviewer] Statens Serum Institut, SSI [copyright holder, funder]","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/diseasystore_exists.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for the existence of a diseasystore for the case definition — diseasystore_exists","title":"Check for the existence of a diseasystore for the case definition — diseasystore_exists","text":"Check existence diseasystore case definition","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/diseasystore_exists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for the existence of a diseasystore for the case definition — diseasystore_exists","text":"","code":"diseasystore_exists(label)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/diseasystore_exists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for the existence of a diseasystore for the case definition — diseasystore_exists","text":"label (character) character string controls feature store get data .","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/diseasystore_exists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for the existence of a diseasystore for the case definition — diseasystore_exists","text":"TRUE given diseasystore can matched diseasystore search path. FALSE otherwise.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/diseasystore_exists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for the existence of a diseasystore for the case definition — diseasystore_exists","text":"","code":"diseasystore_exists(\"Google COVID-19\")  # TRUE #> [1] TRUE   diseasystore_exists(\"Non existent diseasystore\")  # FALSE #> [1] FALSE"},{"path":"https://ssi-dk.github.io/diseasystore/reference/drop_diseasystore.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop feature stores from DB — drop_diseasystore","title":"Drop feature stores from DB — drop_diseasystore","text":"Drop feature stores DB","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/drop_diseasystore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop feature stores from DB — drop_diseasystore","text":"","code":"drop_diseasystore(   pattern = NULL,   schema = diseasyoption(\"target_schema\"),   conn = SCDB::get_connection() )"},{"path":"https://ssi-dk.github.io/diseasystore/reference/drop_diseasystore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop feature stores from DB — drop_diseasystore","text":"pattern (character(1)) Pattern match tables schema (character(1)) Schema diseasystore uses store data conn (DBIConnection) database connection","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/drop_diseasystore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop feature stores from DB — drop_diseasystore","text":"NULL (called side effects)","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/drop_diseasystore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop feature stores from DB — drop_diseasystore","text":"","code":"conn <- SCDB::get_connection(drv = RSQLite::SQLite())    drop_diseasystore(conn = conn) #> NULL    DBI::dbDisconnect(conn)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/get_diseasystore.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the diseasystore for the case definition — get_diseasystore","title":"Get the diseasystore for the case definition — get_diseasystore","text":"Get diseasystore case definition","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/get_diseasystore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the diseasystore for the case definition — get_diseasystore","text":"","code":"get_diseasystore(label)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/get_diseasystore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the diseasystore for the case definition — get_diseasystore","text":"label (character) character string controls feature store get data .","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/get_diseasystore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the diseasystore for the case definition — get_diseasystore","text":"diseasystore generator diseasystore matching given label","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/get_diseasystore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the diseasystore for the case definition — get_diseasystore","text":"","code":"ds <- get_diseasystore(\"Google COVID-19\")  # Returns the DiseasystoreGoogleCovid19 generator"},{"path":"https://ssi-dk.github.io/diseasystore/reference/grapes-.-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Existence aware pick operator — %.%","title":"Existence aware pick operator — %.%","text":"Existence aware pick operator","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/grapes-.-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Existence aware pick operator — %.%","text":"","code":"env %.% field"},{"path":"https://ssi-dk.github.io/diseasystore/reference/grapes-.-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Existence aware pick operator — %.%","text":"env (object) object environment attempt pick field (character) name field pick env","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/grapes-.-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Existence aware pick operator — %.%","text":"Error field exist env, otherwise returns field","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/grapes-.-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Existence aware pick operator — %.%","text":"","code":"t <- list(a = 1, b = 2)   t$a       # 1 #> [1] 1  t %.% a   # 1 #> [1] 1   t$c # NULL #> NULL  try(t %.% c) # Gives error since \"c\" does not exist in \"t\" #> Error in t %.% c : c not found in t"},{"path":"https://ssi-dk.github.io/diseasystore/reference/source_conn_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"File path helper for different source_conn — source_conn_helpers","title":"File path helper for different source_conn — source_conn_helpers","text":"source_conn_path: static url / directory. helper determines whether source_conn file path URL creates full path file needed based type source_conn. source_conn_github: static GitHub API url / git directory. helper determines whether source_conn git directory GitHub API creates full path file needed based type source_conn. GitHub token can configured \"GITHUB_PAT\" environment variable avoid rate limiting. basename requested file contains date, function use fuzzy-matching determine closest matching, chronologically earlier, file location return.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/source_conn_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File path helper for different source_conn — source_conn_helpers","text":"","code":"source_conn_path(source_conn, file)  source_conn_github(source_conn, file, pull = TRUE)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/source_conn_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File path helper for different source_conn — source_conn_helpers","text":"source_conn (character(1)) File location (path URL). file (character(1)) Name (including path) file location. pull (logical(1)) \"git pull\" called local repository reading files?","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/source_conn_helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File path helper for different source_conn — source_conn_helpers","text":"(character(1)) full path requested file.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/source_conn_helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File path helper for different source_conn — source_conn_helpers","text":"","code":"# Simulating a data directory   source_conn <- \"data_dir\"   dir.create(source_conn)   write.csv(mtcars, file.path(source_conn, \"mtcars.csv\"))   write.csv(iris, file.path(source_conn, \"iris.csv\"))    # Get file path for mtcars.csv   source_conn_path(source_conn, \"mtcars.csv\") #> [1] \"data_dir/mtcars.csv\"    # Clean up   unlink(source_conn, recursive = TRUE)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/test_diseasystore.html","id":null,"dir":"Reference","previous_headings":"","what":"Test a given diseasy store — test_diseasystore","title":"Test a given diseasy store — test_diseasystore","text":"function runs battery tests given diseasystore. supplied diseasystore must generator diseasystore, instance diseasystore. tests assume data made available locally run majority tests. location local data configured options \"source_conn\" given diseasystore calling test_diseasystore.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/test_diseasystore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test a given diseasy store — test_diseasystore","text":"","code":"test_diseasystore(   diseasystore_generator = NULL,   conn_generator = NULL,   data_files = NULL,   target_schema = \"test_ds\",   test_start_date = NULL,   ... )"},{"path":"https://ssi-dk.github.io/diseasystore/reference/test_diseasystore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test a given diseasy store — test_diseasystore","text":"diseasystore_generator (Diseasystore*) diseasystore R6 class generator test. conn_generator (function) Function generates list() connections use target_conn. data_files (character()) List files available testing. target_schema (character(1)) data base schema tests run. test_start_date (Date) earliest date retrieve data tests. ... parameters passed diseasystore generator.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/test_diseasystore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test a given diseasy store — test_diseasystore","text":"NULL (called side effects)","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/test_diseasystore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test a given diseasy store — test_diseasystore","text":"","code":"# \\donttest{   withr::local_options(\"diseasystore.DiseasystoreEcdcRespiratoryViruses.pull\" = FALSE)    test_diseasystore(     DiseasystoreEcdcRespiratoryViruses,     \\() list(DBI::dbConnect(RSQLite::SQLite())),     data_files = \"data/snapshots/2023-11-24_ILIARIRates.csv\",     target_schema = \"test_ds\",     test_start_date = as.Date(\"2022-06-20\"),     slice_ts = \"2023-11-24\"   ) #> Test passed  #> Test passed  #> -- Failure: DiseasystoreEcdcRespiratoryViruses can initialise with default source_conn -- #> Expected `ds$get_feature(ds$available_features[[1]])` to run without any errors. #> i Actually got a <purrr_error_indexed> with text: #>   i In index: 1. #>   Caused by error in `source_conn_github()`: #>   ! The directory /tmp/Rtmp5z3RR3 does not appear to be a git repository. Cannot pull. #>  #> Error: Test failed # }"},{"path":"https://ssi-dk.github.io/diseasystore/reference/to_diseasystore_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform case definition to PascalCase — to_diseasystore_case","title":"Transform case definition to PascalCase — to_diseasystore_case","text":"Transform case definition PascalCase","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/to_diseasystore_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform case definition to PascalCase — to_diseasystore_case","text":"","code":"to_diseasystore_case(label)"},{"path":"https://ssi-dk.github.io/diseasystore/reference/to_diseasystore_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform case definition to PascalCase — to_diseasystore_case","text":"label (character) character string controls feature store get data .","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/to_diseasystore_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform case definition to PascalCase — to_diseasystore_case","text":"given label formatted match Diseasystore","code":""},{"path":"https://ssi-dk.github.io/diseasystore/reference/to_diseasystore_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform case definition to PascalCase — to_diseasystore_case","text":"","code":"to_diseasystore_case(\"Google COVID-19\")  # DiseasystoreGoogleCovid19 #> [1] \"DiseasystoreGoogleCovid19\""},{"path":"https://ssi-dk.github.io/diseasystore/news/index.html","id":"diseasystore-021","dir":"Changelog","previous_headings":"","what":"diseasystore 0.2.1","title":"diseasystore 0.2.1","text":"CRAN release: 2024-04-22 Support SCDB v0.3 removed.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/news/index.html","id":"diseasystore-020","dir":"Changelog","previous_headings":"","what":"diseasystore 0.2.0","title":"diseasystore 0.2.0","text":"CRAN release: 2024-03-20","code":""},{"path":"https://ssi-dk.github.io/diseasystore/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New Features:","title":"diseasystore 0.2.0","text":"DiseasystoreEcdcRespiratoryViruses: feature store uses ECDC Respiratory viruses weekly repository (#124). release SCDB v0.4, now support database backends: SQLite attached schemas (#121). Microsoft SQL Server (#128). PostgreSQL (#128). DuckDB (#127). test_diseasystore() added provide standardised method testing new diseasystores (#123).","code":""},{"path":"https://ssi-dk.github.io/diseasystore/news/index.html","id":"minor-improvements-and-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor Improvements and Fixes:","title":"diseasystore 0.2.0","text":"diseasyoption() now allows default option set .default argument (#122).","code":""},{"path":"https://ssi-dk.github.io/diseasystore/news/index.html","id":"diseasystore-011","dir":"Changelog","previous_headings":"","what":"diseasystore 0.1.1","title":"diseasystore 0.1.1","text":"CRAN release: 2024-01-18","code":""},{"path":"https://ssi-dk.github.io/diseasystore/news/index.html","id":"fixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Fixes:","title":"diseasystore 0.1.1","text":"Improved stability internal functions. Adapted release SCDB v0.3.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/news/index.html","id":"documentation-0-1-1","dir":"Changelog","previous_headings":"","what":"Documentation:","title":"diseasystore 0.1.1","text":"Improved documentation functions.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/news/index.html","id":"testing-0-1-1","dir":"Changelog","previous_headings":"","what":"Testing:","title":"diseasystore 0.1.1","text":"Improved test stability internet unavailable. Reduced data footprint tests.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/news/index.html","id":"diseasystore-01","dir":"Changelog","previous_headings":"","what":"diseasystore 0.1","title":"diseasystore 0.1","text":"CRAN release: 2023-12-20","code":""},{"path":"https://ssi-dk.github.io/diseasystore/news/index.html","id":"features-0-1","dir":"Changelog","previous_headings":"","what":"Features:","title":"diseasystore 0.1","text":"DiseasystoreBase: base class diseasystores. R6 class defines interface diseasystores. DiseasystoreGoogleCovid19: feature store uses Google COVID-19 Open Data repository. R6 class builds base class provide interface Google COVID-19 data. FeatureHandler: simple class handle individual feature computations. Defines interface individual feature diseasystores. Aggregators: set aggregators FeatureHandler use. drop_diseasystore(): function remove data feature store. Added informative operator access data %.%. Gives error instead NULL element exist. age_labels(): function generate human-readable sortable age groupings.","code":""},{"path":"https://ssi-dk.github.io/diseasystore/news/index.html","id":"testing-0-1","dir":"Changelog","previous_headings":"","what":"Testing:","title":"diseasystore 0.1","text":"package functions tested .","code":""},{"path":"https://ssi-dk.github.io/diseasystore/news/index.html","id":"documentation-0-1","dir":"Changelog","previous_headings":"","what":"Documentation:","title":"diseasystore 0.1","text":"functions fully documented. Vignettes use package included. vignette(\"quick-start\") vignette(\"extending-diseasystore\") Vignette Google COVID-19 data included. vignette(\"diseasystore-google-covid-19\")","code":""}]
