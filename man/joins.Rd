% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mg_reexports.R
\name{mg_right_join}
\alias{mg_right_join}
\alias{joins}
\alias{mg_left_join}
\alias{mg_inner_join}
\title{SQL Joins}
\usage{
mg_right_join(x, y, by = NULL, na_by = NULL, ...)

mg_left_join(x, y, by = NULL, na_by = NULL, ...)

mg_inner_join(x, y, by = NULL, na_by = NULL, ...)
}
\arguments{
\item{x, y}{A pair of data frames, data frame extensions (e.g. a tibble), or
lazy data frames (e.g. from dbplyr or dtplyr). See \emph{Methods}, below, for
more details.}

\item{by}{A character vector of variables to join by.

If \code{NULL}, the default, \verb{*_join()} will perform a natural join, using all
variables in common across \code{x} and \code{y}. A message lists the variables so that you
can check they're correct; suppress the message by supplying \code{by} explicitly.

To join by different variables on \code{x} and \code{y}, use a named vector.
For example, \code{by = c("a" = "b")} will match \code{x$a} to \code{y$b}.

To join by multiple variables, use a vector with length > 1.
For example, \code{by = c("a", "b")} will match \code{x$a} to \code{y$a} and \code{x$b} to
\code{y$b}. Use a named vector to match different variables in \code{x} and \code{y}.
For example, \code{by = c("a" = "b", "c" = "d")} will match \code{x$a} to \code{y$b} and
\code{x$c} to \code{y$d}.

To perform a cross-join, generating all combinations of \code{x} and \code{y},
use \code{by = character()}.}

\item{na_by}{columns that should match on NA}

\item{...}{Other parameters passed onto methods.}
}
\description{
Overloads the dplyr (left/right)_join to accept an na_by argument.
By default, joining using SQL does not match on NA / NULL.
dbplyr has the option "na_matches = na" to match on NA / NULL but this is very inefficient
This function does the matching more efficiently.
If a column contains NA / NULL, give the argument to na_by to match during the join
If no na_by is given, the function defaults to using dplyr::(left/right)_join
}
\seealso{
\link[dplyr:mutate-joins]{dplyr::mutate-joins} which this function wraps.

\link[dbplyr:join.tbl_sql]{dbplyr::join.tbl_sql} which this function wraps.
}
