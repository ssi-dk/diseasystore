% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/0_locks.R
\name{db_locks}
\alias{db_locks}
\alias{add_table_lock}
\alias{remove_table_lock}
\alias{get_lock_owner}
\alias{cleanup_locks}
\title{Sets, queries and removes locks for db tables}
\usage{
add_table_lock(conn, db_table, schema = NULL)

remove_table_lock(conn, db_table, schema = NULL)

get_lock_owner(conn, db_table, schema = NULL)

cleanup_locks(conn, schema = NULL)
}
\arguments{
\item{conn}{An object that inherits from DBIConnection (as generated by get_connection())}

\item{db_table}{Either a dplyr connection to target table or a specification of 'schema.table'}

\item{schema}{DB schema where lock table is / should be placed}
}
\value{
Most are called for side effects. \code{get_lock_owner} returns the pid of the process that can modify the table.
}
\description{
This set of function adds a simple locking system to db tables.
\itemize{
\item \code{add_table_lock} adds a record in the target_schema.lock table with the current time and R-session process id.
\item \code{remove_table_lock} removes records in the target_schema.lock table with the target table and the
R-session process id.
\item \code{get_lock_owner} returns the process id (pid) associated with the lock on db_table in target_schema.lock
\item \code{cleanup_locks} removes locks that are timed out
}
}
\examples{
conn <- DBI::dbConnect(RSQLite::SQLite())

get_lock_owner(conn, "test_table") # NULL

add_table_lock(conn, "test_table")
get_lock_owner(conn, "test_table") == Sys.getpid() # TRUE

remove_table_lock(conn, "test_table")
get_lock_owner(conn, "test_table") # NULL

DBI::dbDisconnect(conn)
}
